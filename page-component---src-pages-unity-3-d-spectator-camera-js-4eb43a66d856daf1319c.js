webpackJsonp([0x615409634b969c00],{'./node_modules/babel-loader/lib/index.js?{"plugins":["D:/dev/website-src/node_modules/gatsby/dist/utils/babel-plugin-extract-graphql.js","D:/dev/website-src/node_modules/babel-plugin-add-module-exports/lib/index.js","D:/dev/website-src/node_modules/babel-plugin-add-module-exports/lib/index.js","D:/dev/website-src/node_modules/babel-plugin-transform-object-assign/lib/index.js"],"presets":["D:/dev/website-src/node_modules/babel-preset-env/lib/index.js","D:/dev/website-src/node_modules/babel-preset-stage-0/lib/index.js","D:/dev/website-src/node_modules/babel-preset-react/lib/index.js"],"cacheDirectory":true}!./src/pages/unity3d-spectator-camera.js':function(e,t,o){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.title=t.date=void 0;var i=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}(),l=o("./node_modules/react/react.js"),d=n(l),u=o("./src/shared/code.js"),c=n(u),p=o("./src/shared/comments.js"),f=n(p),m=o("./src/shared/page-title.js"),b=n(m),h=o("./src/shared/paragraph.js"),y=n(h),v=t.date="28 Nov 2012",w=t.title="Unity3d tip: spectator and FPS camera without overturning",g=function(e){function t(){return r(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return s(t,e),i(t,[{key:"render",value:function(){return d.default.createElement("div",null,d.default.createElement(b.default,{text:w,date:v}),d.default.createElement(y.default,null,"It’s pretty simple to code a camera to move in a spectator-like (and FPS) fashion. The only trick you should do to make this movement production-ready is to restrict camera movement around the horizontal axis."),d.default.createElement(y.default,null,"Basically, spectator camera rotates either “left-right” (around global vertical Z axis), or “up-down” (around its local X axis). This local X axis is always horizontal, i.e. lies in XZ global plane. When a camera rotates around this axis, the player looks up or down. This leads to a camera overturning problem when he tries to look upper and upper, or lower and lower. All games you’ve seen so far restrict this movement, so that the camera can only look vertically up or vertically down in the “worst case”."),d.default.createElement(y.default,null,"Below is the code I use in my projects for a spectator and FPS cameras. It’s not ideal, because it restricts vertical rotation approximately, so that the camera stops rotating when it almost reached the vertical axis. Approximation amount is adjustable. Anyway, it does the job"),d.default.createElement(c.default,{lang:"c++"},'using UnityEngine;\n\npublic class FreeLook : MonoBehaviour\n{\n    public float rotationSpeed = 0.05f;\n    public float normalSpeed = 10;\n    public float highSpeed = 20;\n\n    private bool _ownCursor = false;\n\n    private void Start()\n    {\n        if (!Screen.lockCursor && Screen.showCursor)\n        {\n            Screen.lockCursor = true;\n            Screen.showCursor = false;\n            _ownCursor = true;\n        }\n    }\n\n    private void OnDisable()\n    {\n        if (_ownCursor)\n        {\n            Screen.lockCursor = false;\n            Screen.showCursor = true;\n        }\n    }\n\n    private void Update()\n    {\n        Vector3 dp = Vector3.zero;\n\n        if (Input.GetKey(KeyCode.W)) dp.z = 1;\n        if (Input.GetKey(KeyCode.S)) dp.z = -1;\n        if (Input.GetKey(KeyCode.A)) dp.x = -1;\n        if (Input.GetKey(KeyCode.D)) dp.x = 1;\n        if (Input.GetKey(KeyCode.Q)) dp.y = -1;\n        if (Input.GetKey(KeyCode.E)) dp.y = 1;\n\n        var speed = normalSpeed * (Input.GetKey(KeyCode.LeftShift) ? 5 : 1);\n\n        dp.Normalize();\n        dp *= speed * Time.deltaTime;\n        camera.transform.Translate(dp.x, dp.y, dp.z, Space.Self);\n\n        float rotY = rotationSpeed * Input.GetAxis("Mouse X");\n        float rotX = -rotationSpeed * Input.GetAxis("Mouse Y");\n\n        float toTop = Vector3.Angle(camera.transform.forward, Vector3.up);\n        if (rotX < 0)\n            rotX = -Mathf.Min(Mathf.Abs(rotX), Mathf.Max(0, toTop - 20));\n        else\n            rotX = Mathf.Min(Mathf.Abs(rotX), Mathf.Max(0, 160 - toTop));\n\n        camera.transform.RotateAround(Vector3.up, rotY);\n        camera.transform.RotateAround(camera.transform.right, rotX);\n    }\n}'),d.default.createElement(f.default,null))}}]),t}(d.default.Component);t.default=g}});
//# sourceMappingURL=page-component---src-pages-unity-3-d-spectator-camera-js-4eb43a66d856daf1319c.js.map