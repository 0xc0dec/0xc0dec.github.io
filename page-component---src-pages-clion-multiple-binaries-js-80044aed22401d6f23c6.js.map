{"version":3,"sources":["webpack:///page-component---src-pages-clion-multiple-binaries-js-80044aed22401d6f23c6.js","webpack:///./src/img/clion/logo.png?2db1","webpack:///./src/img/clion/project.png?61ad","webpack:///./src/pages/clion-multiple-binaries.js?4360"],"names":["webpackJsonp","./src/img/clion/logo.png","module","exports","__webpack_require__","p","./src/img/clion/project.png","./node_modules/babel-loader/lib/index.js?{\"plugins\":[\"D:/dev/website-src/node_modules/gatsby/dist/utils/babel-plugin-extract-graphql.js\",\"D:/dev/website-src/node_modules/babel-plugin-add-module-exports/lib/index.js\",\"D:/dev/website-src/node_modules/babel-plugin-add-module-exports/lib/index.js\",\"D:/dev/website-src/node_modules/babel-plugin-transform-object-assign/lib/index.js\"],\"presets\":[\"D:/dev/website-src/node_modules/babel-preset-env/lib/index.js\",\"D:/dev/website-src/node_modules/babel-preset-stage-0/lib/index.js\",\"D:/dev/website-src/node_modules/babel-preset-react/lib/index.js\"],\"cacheDirectory\":true}!./src/pages/clion-multiple-binaries.js","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","title","date","undefined","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","_react","_react2","_code","_code2","_comments","_comments2","_pageTitle","_pageTitle2","_sectionTitle","_sectionTitle2","_paragraph","_paragraph2","_link","_link2","_inlineCode","_inlineCode2","_articleImages","_articleImages2","_logo","_logo2","_project","_project2","Page","_React$Component","this","getPrototypeOf","apply","arguments","createElement","text","images","to","lang","Component"],"mappings":"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","file":"page-component---src-pages-clion-multiple-binaries-js-80044aed22401d6f23c6.js","sourcesContent":["webpackJsonp([8405022255812999000],{\n\n/***/ \"./src/img/clion/logo.png\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"static/logo.bf7ee2bb.png\";\n\n/***/ }),\n\n/***/ \"./src/img/clion/project.png\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"static/project.29667d0c.png\";\n\n/***/ }),\n\n/***/ \"./node_modules/babel-loader/lib/index.js?{\\\"plugins\\\":[\\\"D:/dev/website-src/node_modules/gatsby/dist/utils/babel-plugin-extract-graphql.js\\\",\\\"D:/dev/website-src/node_modules/babel-plugin-add-module-exports/lib/index.js\\\",\\\"D:/dev/website-src/node_modules/babel-plugin-add-module-exports/lib/index.js\\\",\\\"D:/dev/website-src/node_modules/babel-plugin-transform-object-assign/lib/index.js\\\"],\\\"presets\\\":[\\\"D:/dev/website-src/node_modules/babel-preset-env/lib/index.js\\\",\\\"D:/dev/website-src/node_modules/babel-preset-stage-0/lib/index.js\\\",\\\"D:/dev/website-src/node_modules/babel-preset-react/lib/index.js\\\"],\\\"cacheDirectory\\\":true}!./src/pages/clion-multiple-binaries.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t                value: true\n\t});\n\texports.title = exports.date = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _react = __webpack_require__(\"./node_modules/react/react.js\");\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _code = __webpack_require__(\"./src/shared/code.js\");\n\t\n\tvar _code2 = _interopRequireDefault(_code);\n\t\n\tvar _comments = __webpack_require__(\"./src/shared/comments.js\");\n\t\n\tvar _comments2 = _interopRequireDefault(_comments);\n\t\n\tvar _pageTitle = __webpack_require__(\"./src/shared/page-title.js\");\n\t\n\tvar _pageTitle2 = _interopRequireDefault(_pageTitle);\n\t\n\tvar _sectionTitle = __webpack_require__(\"./src/shared/section-title.js\");\n\t\n\tvar _sectionTitle2 = _interopRequireDefault(_sectionTitle);\n\t\n\tvar _paragraph = __webpack_require__(\"./src/shared/paragraph.js\");\n\t\n\tvar _paragraph2 = _interopRequireDefault(_paragraph);\n\t\n\tvar _link = __webpack_require__(\"./src/shared/link.js\");\n\t\n\tvar _link2 = _interopRequireDefault(_link);\n\t\n\tvar _inlineCode = __webpack_require__(\"./src/shared/inline-code.js\");\n\t\n\tvar _inlineCode2 = _interopRequireDefault(_inlineCode);\n\t\n\tvar _articleImages = __webpack_require__(\"./src/shared/article-images.js\");\n\t\n\tvar _articleImages2 = _interopRequireDefault(_articleImages);\n\t\n\tvar _logo = __webpack_require__(\"./src/img/clion/logo.png\");\n\t\n\tvar _logo2 = _interopRequireDefault(_logo);\n\t\n\tvar _project = __webpack_require__(\"./src/img/clion/project.png\");\n\t\n\tvar _project2 = _interopRequireDefault(_project);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar date = exports.date = '19 Oct 2014';\n\tvar title = exports.title = 'Building multiple linked binaries in CLion on Mac OS X';\n\t\n\tvar Page = function (_React$Component) {\n\t                _inherits(Page, _React$Component);\n\t\n\t                function Page() {\n\t                                _classCallCheck(this, Page);\n\t\n\t                                return _possibleConstructorReturn(this, (Page.__proto__ || Object.getPrototypeOf(Page)).apply(this, arguments));\n\t                }\n\t\n\t                _createClass(Page, [{\n\t                                key: 'render',\n\t                                value: function render() {\n\t                                                return _react2.default.createElement(\n\t                                                                'div',\n\t                                                                null,\n\t                                                                _react2.default.createElement(_pageTitle2.default, { text: title, date: date }),\n\t                                                                _react2.default.createElement(_articleImages2.default, { images: [_logo2.default] }),\n\t                                                                _react2.default.createElement(\n\t                                                                                _paragraph2.default,\n\t                                                                                null,\n\t                                                                                _react2.default.createElement(\n\t                                                                                                _link2.default,\n\t                                                                                                { to: 'https://www.jetbrains.com/clion/' },\n\t                                                                                                'CLion'\n\t                                                                                ),\n\t                                                                                ' is a new C/C++ IDE from JetBrains, the creators of ReSharper, IntelliJ IDEA and many other great products for software developers. CLion is claimed to support a full-featured refactoring workflow for C++, similar to how it is already implemented in other JetBrains products. At this moment the IDE is available in early access mode, which means that we can download and use it freely, keeping in mind that the product is not stable yet, so bugs are possible.'\n\t                                                                ),\n\t                                                                _react2.default.createElement(\n\t                                                                                _paragraph2.default,\n\t                                                                                null,\n\t                                                                                'I decided to move one of my projects from XCode to CLion. The refactoring capabilities of XCode for C++ are far from being good (in fact, there is no refactoring support for C++), and after using ReSharper for my C# projects, I simply don\\u2019t understand how to work without \\u201CRename\\u201D, \\u201CFind usages\\u201D, \\u201CGenerate missing members\\u201D, smart highlighting and a plenty of other super-useful features.'\n\t                                                                ),\n\t                                                                _react2.default.createElement(\n\t                                                                                _paragraph2.default,\n\t                                                                                null,\n\t                                                                                'CLion uses CMake to describe and manage its projects (at least yet). If you\\u2019re not very familiar with CMake (like me), creating and building anything more complex than the default Hello world will be sort of a nightmare. In this post I\\u2019ll share my experience in building a static library and a project that uses this library in CLion, hoping that this will save a lot of googling time for anyone having the similar task.'\n\t                                                                ),\n\t                                                                _react2.default.createElement(\n\t                                                                                _paragraph2.default,\n\t                                                                                null,\n\t                                                                                'For example, we want to build a static library named solo and a test project Test1 that links against it. My project structure looks like this:'\n\t                                                                ),\n\t                                                                _react2.default.createElement(_articleImages2.default, { images: [_project2.default] }),\n\t                                                                _react2.default.createElement(\n\t                                                                                _paragraph2.default,\n\t                                                                                null,\n\t                                                                                'The ',\n\t                                                                                _react2.default.createElement(\n\t                                                                                                _inlineCode2.default,\n\t                                                                                                null,\n\t                                                                                                'src'\n\t                                                                                ),\n\t                                                                                ' folder contains the library source files and the ',\n\t                                                                                _react2.default.createElement(\n\t                                                                                                _inlineCode2.default,\n\t                                                                                                null,\n\t                                                                                                'include'\n\t                                                                                ),\n\t                                                                                ' folder contains the interface headers. The ',\n\t                                                                                _react2.default.createElement(\n\t                                                                                                _inlineCode2.default,\n\t                                                                                                null,\n\t                                                                                                'Test1'\n\t                                                                                ),\n\t                                                                                ' project resides inside the ',\n\t                                                                                _react2.default.createElement(\n\t                                                                                                _inlineCode2.default,\n\t                                                                                                null,\n\t                                                                                                'tests/test1'\n\t                                                                                ),\n\t                                                                                ' folder. I\\u2019m using a single ',\n\t                                                                                _react2.default.createElement(\n\t                                                                                                _inlineCode2.default,\n\t                                                                                                null,\n\t                                                                                                'CMakeLists.txt'\n\t                                                                                ),\n\t                                                                                ' for everything for the sake of simplicity. As the project grows bigger, you might consider splitting it into several ',\n\t                                                                                _react2.default.createElement(\n\t                                                                                                _inlineCode2.default,\n\t                                                                                                null,\n\t                                                                                                'CMakeLists\\u2019'\n\t                                                                                ),\n\t                                                                                ' to make it modular and easier to manage.'\n\t                                                                ),\n\t                                                                _react2.default.createElement(\n\t                                                                                _paragraph2.default,\n\t                                                                                null,\n\t                                                                                'Lets examine the ',\n\t                                                                                _react2.default.createElement(\n\t                                                                                                _inlineCode2.default,\n\t                                                                                                null,\n\t                                                                                                'CMakeLists.txt'\n\t                                                                                ),\n\t                                                                                ' file. The first two lines are added by CLion by default:'\n\t                                                                ),\n\t                                                                _react2.default.createElement(\n\t                                                                                _code2.default,\n\t                                                                                { lang: 'cmake' },\n\t                                                                                'cmake_minimum_required(VERSION 2.8.4)\\nproject(solo)'\n\t                                                                ),\n\t                                                                _react2.default.createElement(\n\t                                                                                _paragraph2.default,\n\t                                                                                null,\n\t                                                                                'They state that we want CMake version to be at least 2.8.4, and our project is called ',\n\t                                                                                _react2.default.createElement(\n\t                                                                                                _inlineCode2.default,\n\t                                                                                                null,\n\t                                                                                                'solo'\n\t                                                                                ),\n\t                                                                                '.'\n\t                                                                ),\n\t                                                                _react2.default.createElement(\n\t                                                                                _paragraph2.default,\n\t                                                                                null,\n\t                                                                                'Here comes the first interesting part: we tell CLion where to save the output binaries. By default, they are put into some wierd location like ',\n\t                                                                                _react2.default.createElement(\n\t                                                                                                _inlineCode2.default,\n\t                                                                                                null,\n\t                                                                                                '/Users/<username>/Library/Caches/clion10/cmake/generated/707a014b/707a014b/Debug'\n\t                                                                                ),\n\t                                                                                '. Here we want to store them in some more conventional place like the build folder inside the project folder:'\n\t                                                                ),\n\t                                                                _react2.default.createElement(\n\t                                                                                _code2.default,\n\t                                                                                { lang: 'cmake' },\n\t                                                                                'set(EXECUTABLE_OUTPUT_PATH \"${PROJECT_SOURCE_DIR}/build/\")\\nset(LIBRARY_OUTPUT_PATH \"${PROJECT_SOURCE_DIR}/build/\")'\n\t                                                                ),\n\t                                                                _react2.default.createElement(\n\t                                                                                _paragraph2.default,\n\t                                                                                null,\n\t                                                                                'The next line tells CMake to pass specific flags to the Clang compiler:'\n\t                                                                ),\n\t                                                                _react2.default.createElement(\n\t                                                                                _code2.default,\n\t                                                                                { lang: 'cmake' },\n\t                                                                                'add_compile_options(-std=c++0x)'\n\t                                                                ),\n\t                                                                _react2.default.createElement(\n\t                                                                                _paragraph2.default,\n\t                                                                                null,\n\t                                                                                'Our library needs some headers to compile, so we tell CMake to search them in a number of directores:'\n\t                                                                ),\n\t                                                                _react2.default.createElement(\n\t                                                                                _code2.default,\n\t                                                                                { lang: 'cmake' },\n\t                                                                                'include_directories(\\n    ${PROJECT_SOURCE_DIR}/include\\n    ${PROJECT_SOURCE_DIR}/external/SDL/2.0.3/include)'\n\t                                                                ),\n\t                                                                _react2.default.createElement(\n\t                                                                                _paragraph2.default,\n\t                                                                                null,\n\t                                                                                'Here the ',\n\t                                                                                _react2.default.createElement(\n\t                                                                                                _inlineCode2.default,\n\t                                                                                                null,\n\t                                                                                                '${PROJECT_SOURCE_DIR}'\n\t                                                                                ),\n\t                                                                                ' refers to the root project folder.'\n\t                                                                ),\n\t                                                                _react2.default.createElement(\n\t                                                                                _paragraph2.default,\n\t                                                                                null,\n\t                                                                                'We also need to specify where to look for the external libraries when linking our library against them:'\n\t                                                                ),\n\t                                                                _react2.default.createElement(\n\t                                                                                _code2.default,\n\t                                                                                { lang: 'cmake' },\n\t                                                                                'link_directories(${PROJECT_SOURCE_DIR}/external/SDL/2.0.3)'\n\t                                                                ),\n\t                                                                _react2.default.createElement(\n\t                                                                                _paragraph2.default,\n\t                                                                                null,\n\t                                                                                'Next we tell CMake to find all ',\n\t                                                                                _react2.default.createElement(\n\t                                                                                                _inlineCode2.default,\n\t                                                                                                null,\n\t                                                                                                '*.cpp'\n\t                                                                                ),\n\t                                                                                ' files inside the src folder and put them into the ',\n\t                                                                                _react2.default.createElement(\n\t                                                                                                _inlineCode2.default,\n\t                                                                                                null,\n\t                                                                                                'sources'\n\t                                                                                ),\n\t                                                                                ' variable:'\n\t                                                                ),\n\t                                                                _react2.default.createElement(\n\t                                                                                _code2.default,\n\t                                                                                { lang: 'cmake' },\n\t                                                                                'file(GLOB sources \"src/*.cpp\")'\n\t                                                                ),\n\t                                                                _react2.default.createElement(\n\t                                                                                _paragraph2.default,\n\t                                                                                null,\n\t                                                                                'In the next chunk of code we tell CMake to find some frameworks that we\\u2019re going to be using, and save their paths to the frameworks variable:'\n\t                                                                ),\n\t                                                                _react2.default.createElement(\n\t                                                                                _code2.default,\n\t                                                                                { lang: 'cmake' },\n\t                                                                                'find_library(carbon_lib Carbon) # we look for the Carbon framework and use carbon_lib as an alias for it\\nfind_library(iokit_lib IOKit)\\nfind_library(forcefeedback_lib ForceFeedback)\\nfind_library(cocoa_lib Cocoa)\\nfind_library(audiounit_lib AudioUnit)\\nfind_library(coreaudio_lib CoreAudio)\\nfind_library(opengl_lib OpenGL)\\nfind_library(corefoundation_lib CoreFoundation)\\n\\nset(frameworks\\n    ${carbon_lib}\\n    ${iokit_lib}\\n    ${forcefeedback_lib}\\n    ${cocoa_lib}\\n    ${audiounit_lib}\\n    ${coreaudio_lib}\\n    ${opengl_lib}\\n    ${corefoundation_lib})'\n\t                                                                ),\n\t                                                                _react2.default.createElement(\n\t                                                                                _paragraph2.default,\n\t                                                                                null,\n\t                                                                                'Finally, we say that we want to build a static library from the given sources and link it against the SDL2 library and the frameworks that we found before:'\n\t                                                                ),\n\t                                                                _react2.default.createElement(\n\t                                                                                _code2.default,\n\t                                                                                { lang: 'cmake' },\n\t                                                                                'add_library(solo STATIC ${sources})\\ntarget_link_libraries(solo SDL2 ${frameworks})'\n\t                                                                ),\n\t                                                                _react2.default.createElement(\n\t                                                                                _paragraph2.default,\n\t                                                                                null,\n\t                                                                                'Adding the second binary (the ',\n\t                                                                                _react2.default.createElement(\n\t                                                                                                _inlineCode2.default,\n\t                                                                                                null,\n\t                                                                                                'Test1'\n\t                                                                                ),\n\t                                                                                ' executable) is as easy as it is. We tell CMake to build it from the ',\n\t                                                                                _react2.default.createElement(\n\t                                                                                                _inlineCode2.default,\n\t                                                                                                null,\n\t                                                                                                'Main.cpp'\n\t                                                                                ),\n\t                                                                                ' file and link agains the ',\n\t                                                                                _react2.default.createElement(\n\t                                                                                                _inlineCode2.default,\n\t                                                                                                null,\n\t                                                                                                'solo'\n\t                                                                                ),\n\t                                                                                ' library:'\n\t                                                                ),\n\t                                                                _react2.default.createElement(\n\t                                                                                _code2.default,\n\t                                                                                { lang: 'cmake' },\n\t                                                                                'add_executable(Test1 tests/test1/Main.cpp)\\ntarget_link_libraries(Test1 LINK_PUBLIC solo)'\n\t                                                                ),\n\t                                                                _react2.default.createElement(\n\t                                                                                _paragraph2.default,\n\t                                                                                null,\n\t                                                                                'Now if you hit ',\n\t                                                                                _react2.default.createElement(\n\t                                                                                                _inlineCode2.default,\n\t                                                                                                null,\n\t                                                                                                'Cmd + F9'\n\t                                                                                ),\n\t                                                                                ' (Build), you should see two new files inside the build folder: ',\n\t                                                                                _react2.default.createElement(\n\t                                                                                                _inlineCode2.default,\n\t                                                                                                null,\n\t                                                                                                'Test1'\n\t                                                                                ),\n\t                                                                                ' and ',\n\t                                                                                _react2.default.createElement(\n\t                                                                                                _inlineCode2.default,\n\t                                                                                                null,\n\t                                                                                                'libsolo.a'\n\t                                                                                ),\n\t                                                                                '.'\n\t                                                                ),\n\t                                                                _react2.default.createElement(\n\t                                                                                _paragraph2.default,\n\t                                                                                null,\n\t                                                                                'The whole ',\n\t                                                                                _react2.default.createElement(\n\t                                                                                                _inlineCode2.default,\n\t                                                                                                null,\n\t                                                                                                'CMakeLists.txt'\n\t                                                                                ),\n\t                                                                                ' file:'\n\t                                                                ),\n\t                                                                _react2.default.createElement(\n\t                                                                                _code2.default,\n\t                                                                                { lang: 'cmake' },\n\t                                                                                'cmake_minimum_required(VERSION 2.8.4)\\nproject(solo)\\n\\nset(EXECUTABLE_OUTPUT_PATH \"${PROJECT_SOURCE_DIR}/build/\")\\nset(LIBRARY_OUTPUT_PATH \"${PROJECT_SOURCE_DIR}/build/\")\\n\\nadd_compile_options(-std=c++0x)\\n\\ninclude_directories(\\n    ${PROJECT_SOURCE_DIR}/include\\n    ${PROJECT_SOURCE_DIR}/external/SDL/2.0.3/include)\\n\\nlink_directories(${PROJECT_SOURCE_DIR}/external/SDL/2.0.3)\\n\\n# Engine\\n\\nfile(GLOB sources \"src/*.cpp\")\\n\\nfind_library(carbon_lib Carbon)\\nfind_library(iokit_lib IOKit)\\nfind_library(forcefeedback_lib ForceFeedback)\\nfind_library(cocoa_lib Cocoa)\\nfind_library(audiounit_lib AudioUnit)\\nfind_library(coreaudio_lib CoreAudio)\\nfind_library(opengl_lib OpenGL)\\nfind_library(corefoundation_lib CoreFoundation)\\n\\nset(frameworks\\n    ${carbon_lib}\\n    ${iokit_lib}\\n    ${forcefeedback_lib}\\n    ${cocoa_lib}\\n    ${audiounit_lib}\\n    ${coreaudio_lib}\\n    ${opengl_lib}\\n    ${corefoundation_lib})\\n\\nadd_library(solo STATIC ${sources})\\ntarget_link_libraries(solo SDL2 ${frameworks})\\n\\n# Tests\\nadd_executable(Test1 tests/test1/Main.cpp)\\ntarget_link_libraries(Test1 LINK_PUBLIC solo)'\n\t                                                                ),\n\t                                                                _react2.default.createElement(_sectionTitle2.default, { text: 'Conclusion' }),\n\t                                                                _react2.default.createElement(\n\t                                                                                _paragraph2.default,\n\t                                                                                null,\n\t                                                                                'This article gives a recipe for writing a simple CMake file for building two linked binaries in CLion. Keep in mind that I\\u2019m not an expert in CMake, neither in Clion, so the given file might not be the best that you can make to get the job done. However, it gives a good start for working with CLion, which, as I have noticed, is not well covered in the online tutorials yet.'\n\t                                                                ),\n\t                                                                _react2.default.createElement(_comments2.default, null)\n\t                                                );\n\t                                }\n\t                }]);\n\t\n\t                return Page;\n\t}(_react2.default.Component);\n\t\n\texports.default = Page;\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// page-component---src-pages-clion-multiple-binaries-js-80044aed22401d6f23c6.js","module.exports = __webpack_public_path__ + \"static/logo.bf7ee2bb.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/img/clion/logo.png\n// module id = ./src/img/clion/logo.png\n// module chunks = 4016850265702045000 8405022255812999000","module.exports = __webpack_public_path__ + \"static/project.29667d0c.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/img/clion/project.png\n// module id = ./src/img/clion/project.png\n// module chunks = 4016850265702045000 8405022255812999000","import React from 'react';\r\nimport Code from './../shared/code';\r\nimport Comments from './../shared/comments';\r\nimport PageTitle from './../shared/page-title';\r\nimport SectionTitle from './../shared/section-title';\r\nimport Paragraph from './../shared/paragraph';\r\nimport Link from './../shared/link';\r\nimport InlineCode from './../shared/inline-code';\r\nimport ArticleImages from './../shared/article-images';\r\n\r\nimport img1 from './../img/clion/logo.png';\r\nimport img2 from './../img/clion/project.png';\r\n\r\nexport const date = '19 Oct 2014';\r\nexport const title = 'Building multiple linked binaries in CLion on Mac OS X';\r\n\r\nexport default class Page extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <PageTitle text={title} date={date}/>\r\n\r\n                <ArticleImages images={[img1]}/>\r\n\r\n                <Paragraph>\r\n                    <Link to=\"https://www.jetbrains.com/clion/\">CLion</Link> is a new C/C++ IDE from JetBrains, the creators of\r\n                    ReSharper, IntelliJ IDEA and many other great products for\r\n                    software developers. CLion is claimed to support a full-featured\r\n                    refactoring workflow for C++, similar to how it is already\r\n                    implemented in other JetBrains products. At this moment the IDE\r\n                    is available in early access mode, which means that we can download\r\n                    and use it freely, keeping in mind that the product is not stable yet,\r\n                    so bugs are possible.\r\n                </Paragraph>\r\n\r\n                <Paragraph>\r\n                    I decided to move one of my projects from XCode to CLion.\r\n                    The refactoring capabilities of XCode for C++ are far from\r\n                    being good (in fact, there is no refactoring support for C++),\r\n                    and after using ReSharper for my C# projects, I simply don’t\r\n                    understand how to work without “Rename”, “Find usages”,\r\n                    “Generate missing members”, smart highlighting and a plenty of other super-useful features.\r\n                </Paragraph>\r\n\r\n                <Paragraph>\r\n                    CLion uses CMake to describe and manage its projects (at least yet).\r\n                    If you’re not very familiar with CMake (like me), creating and building\r\n                    anything more complex than the default Hello world will be sort of\r\n                    a nightmare. In this post I’ll share my experience in building a\r\n                    static library and a project that uses this library in CLion,\r\n                    hoping that this will save a lot of googling time for anyone having the similar task.\r\n                </Paragraph>\r\n\r\n                <Paragraph>\r\n                    For example, we want to build a static library named solo\r\n                    and a test project Test1 that links against it. My project structure looks like this:\r\n                </Paragraph>\r\n\r\n                <ArticleImages images={[img2]}/>\r\n\r\n                <Paragraph>\r\n                    The <InlineCode>src</InlineCode> folder contains the library source\r\n                    files and the <InlineCode>include</InlineCode> folder contains the interface headers.\r\n                    The <InlineCode>Test1</InlineCode> project resides inside the <InlineCode>tests/test1</InlineCode> folder.\r\n                    I’m using a single <InlineCode>CMakeLists.txt</InlineCode> for everything for the sake of\r\n                    simplicity. As the project grows bigger, you might consider\r\n                    splitting it into several <InlineCode>CMakeLists’</InlineCode> to make it modular and easier to manage.\r\n                </Paragraph>\r\n\r\n                <Paragraph>\r\n                    Lets examine the <InlineCode>CMakeLists.txt</InlineCode> file. The first two lines are added by CLion by default:\r\n                </Paragraph>\r\n\r\n                <Code lang=\"cmake\">\r\n{`cmake_minimum_required(VERSION 2.8.4)\r\nproject(solo)`}\r\n                </Code>\r\n\r\n                <Paragraph>\r\n                    They state that we want CMake version to be at least 2.8.4, and our project is called <InlineCode>solo</InlineCode>.\r\n                </Paragraph>\r\n\r\n                <Paragraph>\r\n                    Here comes the first interesting part: we tell CLion where to save the output binaries.\r\n                    By default, they are put into some wierd location\r\n                    like <InlineCode>{`/Users/<username>/Library/Caches/clion10/cmake/generated/707a014b/707a014b/Debug`}</InlineCode>.\r\n                    Here we want to store them in some more conventional place like the build folder inside the project folder:\r\n                </Paragraph>\r\n\r\n                <Code lang=\"cmake\">\r\n{`set(EXECUTABLE_OUTPUT_PATH \"$\\{PROJECT_SOURCE_DIR\\}/build/\")\r\nset(LIBRARY_OUTPUT_PATH \"$\\{PROJECT_SOURCE_DIR\\}/build/\")`}\r\n                </Code>\r\n\r\n                <Paragraph>\r\n                    The next line tells CMake to pass specific flags to the Clang compiler:\r\n                </Paragraph>\r\n\r\n                <Code lang=\"cmake\">\r\n{`add_compile_options(-std=c++0x)`}\r\n                </Code>\r\n\r\n                <Paragraph>\r\n                    Our library needs some headers to compile, so we tell CMake to search them in a number of directores:\r\n                </Paragraph>\r\n\r\n                <Code lang=\"cmake\">\r\n{`include_directories(\r\n    $\\{PROJECT_SOURCE_DIR\\}/include\r\n    $\\{PROJECT_SOURCE_DIR\\}/external/SDL/2.0.3/include)`}\r\n                </Code>\r\n\r\n                <Paragraph>\r\n                    Here the <InlineCode>{`$\\{PROJECT_SOURCE_DIR\\}`}</InlineCode> refers to the root project folder.\r\n                </Paragraph>\r\n\r\n                <Paragraph>\r\n                    We also need to specify where to look for the external libraries when linking our library against them:\r\n                </Paragraph>\r\n\r\n                <Code lang=\"cmake\">\r\n{`link_directories($\\{PROJECT_SOURCE_DIR\\}/external/SDL/2.0.3)`}\r\n                </Code>\r\n\r\n                <Paragraph>\r\n                    Next we tell CMake to find all <InlineCode>*.cpp</InlineCode> files inside the src folder and put them into\r\n                    the <InlineCode>sources</InlineCode> variable:\r\n                </Paragraph>\r\n\r\n                <Code lang=\"cmake\">\r\n{`file(GLOB sources \"src/*.cpp\")`}\r\n                </Code>\r\n\r\n                <Paragraph>\r\n                    In the next chunk of code we tell CMake to find some frameworks that we’re going\r\n                    to be using, and save their paths to the frameworks variable:\r\n                </Paragraph>\r\n\r\n                <Code lang=\"cmake\">\r\n{`find_library(carbon_lib Carbon) # we look for the Carbon framework and use carbon_lib as an alias for it\r\nfind_library(iokit_lib IOKit)\r\nfind_library(forcefeedback_lib ForceFeedback)\r\nfind_library(cocoa_lib Cocoa)\r\nfind_library(audiounit_lib AudioUnit)\r\nfind_library(coreaudio_lib CoreAudio)\r\nfind_library(opengl_lib OpenGL)\r\nfind_library(corefoundation_lib CoreFoundation)\r\n\r\nset(frameworks\r\n    $\\{carbon_lib\\}\r\n    $\\{iokit_lib\\}\r\n    $\\{forcefeedback_lib\\}\r\n    $\\{cocoa_lib\\}\r\n    $\\{audiounit_lib\\}\r\n    $\\{coreaudio_lib\\}\r\n    $\\{opengl_lib\\}\r\n    $\\{corefoundation_lib\\})`}\r\n                </Code>\r\n\r\n                <Paragraph>\r\n                    Finally, we say that we want to build a static library from the given sources\r\n                    and link it against the SDL2 library and the frameworks that we found before:\r\n                </Paragraph>\r\n\r\n                <Code lang=\"cmake\">\r\n{`add_library(solo STATIC $\\{sources\\})\r\ntarget_link_libraries(solo SDL2 $\\{frameworks\\})`}\r\n                </Code>\r\n\r\n                <Paragraph>\r\n                    Adding the second binary (the <InlineCode>Test1</InlineCode> executable)\r\n                    is as easy as it is. We tell CMake to build it from\r\n                    the <InlineCode>Main.cpp</InlineCode> file and link agains the <InlineCode>solo</InlineCode> library:\r\n                </Paragraph>\r\n\r\n                <Code lang=\"cmake\">\r\n{`add_executable(Test1 tests/test1/Main.cpp)\r\ntarget_link_libraries(Test1 LINK_PUBLIC solo)`}\r\n                </Code>\r\n\r\n                <Paragraph>\r\n                    Now if you hit <InlineCode>Cmd + F9</InlineCode> (Build), you should see\r\n                    two new files inside the build folder: <InlineCode>Test1</InlineCode> and <InlineCode>libsolo.a</InlineCode>.\r\n                </Paragraph>\r\n\r\n                <Paragraph>\r\n                    The whole <InlineCode>CMakeLists.txt</InlineCode> file:\r\n                </Paragraph>\r\n\r\n                <Code lang=\"cmake\">\r\n{`cmake_minimum_required(VERSION 2.8.4)\r\nproject(solo)\r\n\r\nset(EXECUTABLE_OUTPUT_PATH \"$\\{PROJECT_SOURCE_DIR\\}/build/\")\r\nset(LIBRARY_OUTPUT_PATH \"$\\{PROJECT_SOURCE_DIR\\}/build/\")\r\n\r\nadd_compile_options(-std=c++0x)\r\n\r\ninclude_directories(\r\n    $\\{PROJECT_SOURCE_DIR\\}/include\r\n    $\\{PROJECT_SOURCE_DIR\\}/external/SDL/2.0.3/include)\r\n\r\nlink_directories($\\{PROJECT_SOURCE_DIR\\}/external/SDL/2.0.3)\r\n\r\n# Engine\r\n\r\nfile(GLOB sources \"src/*.cpp\")\r\n\r\nfind_library(carbon_lib Carbon)\r\nfind_library(iokit_lib IOKit)\r\nfind_library(forcefeedback_lib ForceFeedback)\r\nfind_library(cocoa_lib Cocoa)\r\nfind_library(audiounit_lib AudioUnit)\r\nfind_library(coreaudio_lib CoreAudio)\r\nfind_library(opengl_lib OpenGL)\r\nfind_library(corefoundation_lib CoreFoundation)\r\n\r\nset(frameworks\r\n    $\\{carbon_lib\\}\r\n    $\\{iokit_lib\\}\r\n    $\\{forcefeedback_lib\\}\r\n    $\\{cocoa_lib\\}\r\n    $\\{audiounit_lib\\}\r\n    $\\{coreaudio_lib\\}\r\n    $\\{opengl_lib\\}\r\n    $\\{corefoundation_lib\\})\r\n\r\nadd_library(solo STATIC $\\{sources\\})\r\ntarget_link_libraries(solo SDL2 $\\{frameworks\\})\r\n\r\n# Tests\r\nadd_executable(Test1 tests/test1/Main.cpp)\r\ntarget_link_libraries(Test1 LINK_PUBLIC solo)`}\r\n                </Code>\r\n\r\n                <SectionTitle text=\"Conclusion\"/>\r\n\r\n                <Paragraph>\r\n                    This article gives a recipe for writing a simple CMake file\r\n                    for building two linked binaries in CLion. Keep in mind that I’m not\r\n                        an expert in CMake, neither in Clion, so the given file might not\r\n                    be the best that you can make to get the job done. However, it gives\r\n                    a good start for working with CLion, which, as I have noticed,\r\n                    is not well covered in the online tutorials yet.\r\n                </Paragraph>\r\n\r\n                <Comments/>\r\n            </div>\r\n        );\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/clion-multiple-binaries.js"],"sourceRoot":""}