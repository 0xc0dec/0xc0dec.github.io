webpackJsonp([0x6f0e562422279c00],{'./node_modules/babel-loader/lib/index.js?{"plugins":["D:/dev/website-src/node_modules/gatsby/dist/utils/babel-plugin-extract-graphql.js","D:/dev/website-src/node_modules/babel-plugin-add-module-exports/lib/index.js","D:/dev/website-src/node_modules/babel-plugin-add-module-exports/lib/index.js","D:/dev/website-src/node_modules/babel-plugin-transform-object-assign/lib/index.js"],"presets":["D:/dev/website-src/node_modules/babel-preset-env/lib/index.js","D:/dev/website-src/node_modules/babel-preset-stage-0/lib/index.js","D:/dev/website-src/node_modules/babel-preset-react/lib/index.js"],"cacheDirectory":true}!./src/pages/odd-cpp.js':function(e,t,n){"use strict";function l(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.title=t.date=void 0;var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var l=t[n];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(e,l.key,l)}}return function(t,n,l){return n&&e(t.prototype,n),l&&e(t,l),t}}(),u=n("./node_modules/react/react.js"),c=l(u),d=n("./src/shared/code.js"),s=l(d),f=n("./src/shared/comments.js"),p=l(f),m=n("./src/shared/page-title.js"),b=l(m),h=n("./src/shared/paragraph.js"),g=l(h),y=n("./src/shared/link.js"),E=l(y),w=n("./src/shared/inline-code.js"),x=l(w),C=t.date="09 Mar 2013",v=t.title="Something you probably didn’t know about C/C++",j=function(e){function t(){return a(this,t),r(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return o(t,e),i(t,[{key:"render",value:function(){return c.default.createElement("div",null,c.default.createElement(b.default,{text:v,date:C}),c.default.createElement(g.default,null,"I love to collect mind-blowing and not too widely known C/C++ language constructions and facts. This post carries my collection and will be updated when new entries appear."),c.default.createElement(g.default,null,"C/C++"),c.default.createElement(s.default,{lang:"c++"},"// zero-sized bit fields\nstruct S\n{\n  int a;\n  int b:2;\n  int c:6,\n  :0;\n  int d;\n};"),c.default.createElement(g.default,null,"C-only"),c.default.createElement(s.default,{lang:"c++"},'// Exit code when there\'s no return statement?\n#include <stdio.h>\nint main()\n{\n  printf("Test\\n");\n}\n\n// The program exit code will be... ? 5. When there is no return statement,\n// the program will return the result of the last executed function.\n// In this case it is 5, because printf returns the number of symbols actually printed.'),c.default.createElement(g.default,null,"C/C++"),c.default.createElement(s.default,{lang:"c++"},"// a[b] is practically the same as *(a + b)\nchar c = 4[\"Hello, world!\"]; // c == 'o'"),c.default.createElement(g.default,null,"C/C++"),c.default.createElement(s.default,{lang:"c++"},"int x = 33;\nint f()\n{\n  int x = 1045;\n  {\n    return x; // returns 1045\n  }\n}\n\nint x = 33;\nint f()\n{\n  int x = 1045;\n  {\n    extern int x;\n    return x; // returns 33\n  }\n}"),c.default.createElement(g.default,null,"C-only"),c.default.createElement(s.default,{lang:"c++"},"// Passed array must have at least 10 elements (-Warray-bounds):\nvoid f(int arr[static 10]) { }\n\n// Free compile-time not-NULL check [-Wnonnull]\nvoid f(int arr[static 1]) { }"),c.default.createElement(g.default,null,"C-only"),c.default.createElement(s.default,{lang:"c++"},"int x = 'FOO!'; // single quotes! codepad.org compiler says x == 1179602721"),c.default.createElement(g.default,null,"C/C++"),c.default.createElement(s.default,{lang:"c++"},'int x = y+++z; // parsed as y++ + z ("greedy lexer rule")\nint a = b+++++c; // b++ ++ + c, not b++ + ++c'),c.default.createElement(g.default,null,"C-only"),c.default.createElement(s.default,{lang:"c++"},"// The shortest C-program that compiles and links. With a warning. Do not run!\nmain;\n// No warnings. Do not run either!\nint main;"),c.default.createElement(g.default,null,"C-only"),c.default.createElement(s.default,{lang:"c++"},"// Old-style function definition\nint main(argc, argv)\nint argc;\nchar *argv[];\n{\n  return 0;\n}"),c.default.createElement(g.default,null,"C-only"),c.default.createElement(s.default,{lang:"c++"},"return ((int []){1,2,3,4})[1];\n// returns 2"),c.default.createElement(g.default,null,"C-only"),c.default.createElement(s.default,{lang:"c++"},"// Initializer with designators hell\nstruct {\n   int x;\n   struct {\n       int y, z;\n   } nested;\n} i = { .nested.y = 5, 6, .x = 1, 2 };\n// i.nested.y == 2, i.nested.z == 6"),c.default.createElement(g.default,null,"GCC C-only"),c.default.createElement(s.default,{lang:"c++"},"// omit second component of ?: operator\nextern int f();\nreturn f() ? : -1; // Returns f() if it's not zero, or -1 otherwise. Reminds me of C# operator ??"),c.default.createElement(g.default,null,"C/C++"),c.default.createElement(s.default,{lang:"c++"},"// zero-sized bit fields\nstruct S\n{\n  int a;\n  int b:2;\n  int c:6,\n  :0;\n  int d;\n};"),c.default.createElement(g.default,null,"Most interesting parts of ",c.default.createElement(E.default,{to:"http://nickdesaulniers.github.io/blog/2013/07/25/designated-initialization-with-pointers-in-c/"},"this")," article about designated initialization in C:"),c.default.createElement(s.default,{lang:"c++"},"struct point\n{\n  int x, y;\n};\n// ...\nstruct point p = { 1, 2 } // ok, p now has coordinates (1, 2)"),c.default.createElement(s.default,{lang:"c++"},"struct point p = { .y = 1, .x = 2 } // ok, p now has coordinates (2, 1)"),c.default.createElement(s.default,{lang:"c++"},"// Re-assign? No problems, but tricky\nstruct point p = { .x = 1, .y = 2 };\n// ...\np = { .x = 10, .y = 20 }; // compilation error\np = (struct point){ .x = 10, .y = 20 }; // works\np = (struct point){ 10, 20 }; // this works too"),c.default.createElement(s.default,{lang:"c++"},"int distance(struct point a, struct point b);\n// ...\ndistance({ 1, 2 }, { 3, 4 }); // no-no, compilation error\ndistance((struct point){ 1, 2 }, (struct point) { 3, 4 }); // fine, this compiles"),c.default.createElement(s.default,{lang:"c++"},'// Initializing pointer members\nstruct node\n{\n  char *value;\n  struct node *next;\n};\n// ...\nstruct node n =\n{\n  .value = "Hello, world!",\n  .next = (&(struct node) { .value = "Next node" }) // wow!\n}'),c.default.createElement(g.default,null,"Empty declarations in C:"),c.default.createElement(s.default,{lang:"c++"},"typedef;\nint typedef const;"),c.default.createElement(g.default,null,"Won’t compile with ",c.default.createElement(x.default,null,"-Wall")," though."),c.default.createElement(g.default,null,"Some people write such code probably hoping that C/C++ has native support for tuples. No, it doesn’t."),c.default.createElement(s.default,{lang:"c++"},"int func()\n{\n    int a = 1;\n    int b = 2;\n    int c = 3;\n    return (a, b, c);\n}\n\n// ...\n\nint d = func(); // d == c == 3, if () operator is not overloaded"),c.default.createElement(g.default,null,"This construction is strange in a way that you probably won’t encounter it very often. For some reasons it’s not commonly used. The ",c.default.createElement(E.default,{to:"http://en.cppreference.com/w/cpp/language/function-try-block"},"function-try-block"),":"),c.default.createElement(s.default,{lang:"c++"},"int f(int n = 2) try {\n  ++n; // increments the function parameter\n  throw n;\n} catch(...) {\n  ++n; // n is in scope and still refers to the function parameter\n  assert(n == 4);\n  return n;\n}"),c.default.createElement(p.default,null))}}]),t}(c.default.Component);t.default=j}});
//# sourceMappingURL=page-component---src-pages-odd-cpp-js-0363c2151dc78f5033e0.js.map