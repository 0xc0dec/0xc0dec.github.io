{"version":3,"sources":["webpack:///page-component---src-pages-freeglut-fixed-window-js-96ff9306aaf5101346a5.js","webpack:///./src/pages/freeglut-fixed-window.js?1c2f"],"names":["webpackJsonp","./node_modules/babel-loader/lib/index.js?{\"plugins\":[\"D:/dev/website-src/node_modules/gatsby/dist/utils/babel-plugin-extract-graphql.js\",\"D:/dev/website-src/node_modules/babel-plugin-add-module-exports/lib/index.js\",\"D:/dev/website-src/node_modules/babel-plugin-add-module-exports/lib/index.js\",\"D:/dev/website-src/node_modules/babel-plugin-transform-object-assign/lib/index.js\"],\"presets\":[\"D:/dev/website-src/node_modules/babel-preset-env/lib/index.js\",\"D:/dev/website-src/node_modules/babel-preset-stage-0/lib/index.js\",\"D:/dev/website-src/node_modules/babel-preset-react/lib/index.js\"],\"cacheDirectory\":true}!./src/pages/freeglut-fixed-window.js","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","title","date","undefined","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","_react","_react2","_code","_code2","_comments","_comments2","_pageTitle","_pageTitle2","_paragraph","_paragraph2","_inlineCode","_inlineCode2","Page","_React$Component","this","getPrototypeOf","apply","arguments","createElement","text","lang","Component"],"mappings":"AAAAA,cAAc,qBAERC,4oBACA,SAAUC,EAAQC,EAASC,GAEhC,YAiCA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GAEvF,QAASG,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,GAA2BC,EAAMC,GAAQ,IAAKD,EAAQ,KAAM,IAAIE,gBAAe,4DAAgE,QAAOD,GAAyB,gBAATA,IAAqC,kBAATA,GAA8BD,EAAPC,EAElO,QAASE,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIP,WAAU,iEAAoEO,GAAeD,GAASE,UAAYC,OAAOC,OAAOH,GAAcA,EAAWC,WAAaG,aAAeC,MAAON,EAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,IAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,EAAUC,GAAcD,EAASW,UAAYV,GArCjeE,OAAOS,eAAe3B,EAAS,cAC3BqB,OAAO,IAEXrB,EAAQ4B,MAAQ5B,EAAQ6B,KAAOC,MAE/B,IAAIC,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWf,WAAae,EAAWf,aAAc,EAAOe,EAAWb,cAAe,EAAU,SAAWa,KAAYA,EAAWd,UAAW,GAAML,OAAOS,eAAeM,EAAQI,EAAWC,IAAKD,IAAiB,MAAO,UAAU7B,EAAa+B,EAAYC,GAAiJ,MAA9HD,IAAYP,EAAiBxB,EAAYS,UAAWsB,GAAiBC,GAAaR,EAAiBxB,EAAagC,GAAqBhC,MCZjiBiC,EAAAxC,EAAA,iCDgBKyC,EAAUxC,EAAuBuC,GCftCE,EAAA1C,EAAA,wBDmBK2C,EAAS1C,EAAuByC,GClBrCE,EAAA5C,EAAA,4BDsBK6C,EAAa5C,EAAuB2C,GCrBzCE,EAAA9C,EAAA,8BDyBK+C,EAAc9C,EAAuB6C,GCxB1CE,EAAAhD,EAAA,6BD4BKiD,EAAchD,EAAuB+C,GC3B1CE,EAAAlD,EAAA,+BD+BKmD,EAAelD,EAAuBiD,GC7B9BtB,SAAO,cACPD,UAAQ,wBAEAyB,EDuCT,SAAUC,GAGjB,QAASD,KAGL,MAFA/C,GAAgBiD,KAAMF,GAEf3C,EAA2B6C,MAAOF,EAAK3B,WAAaR,OAAOsC,eAAeH,IAAOI,MAAMF,KAAMG,YAyDxG,MA9DA5C,GAAUuC,EAAMC,GAQhBvB,EAAasB,IACTf,IAAK,SACLjB,MAAO,WChDR,MACIqB,GAAArC,QAAAsD,cAAA,WACIjB,EAAArC,QAAAsD,cAAAX,EAAA3C,SAAWuD,KAAMhC,EAAOC,KAAMA,IAE9Ba,EAAArC,QAAAsD,cAAAT,EAAA7C,QAAA,yNAMAqC,EAAArC,QAAAsD,cAAAT,EAAA7C,QAAA,qCACiCqC,EAAArC,QAAAsD,cAAAP,EAAA/C,QAAA,uBADjC,kEAKAqC,EAAArC,QAAAsD,cAAAf,EAAAvC,SAAMwD,KAAK,OAAX,6RAUAnB,EAAArC,QAAAsD,cAAAT,EAAA7C,QAAA,yBACqBqC,EAAArC,QAAAsD,cAAAP,EAAA/C,QAAA,0BADrB,UAIAqC,EAAArC,QAAAsD,cAAAf,EAAAvC,SAAMwD,KAAK,UAAX,2zBAuBAnB,EAAArC,QAAAsD,cAAAT,EAAA7C,QAAA,oGAIAqC,EAAArC,QAAAsD,cAAAb,EAAAzC,QAAA,WD4CJgD,GCtGsBX,EAAArC,QAAMyD,UDyGvC9D,GAAQK,QCzGYgD","file":"page-component---src-pages-freeglut-fixed-window-js-96ff9306aaf5101346a5.js","sourcesContent":["webpackJsonp([14571134556174995000],{\n\n/***/ \"./node_modules/babel-loader/lib/index.js?{\\\"plugins\\\":[\\\"D:/dev/website-src/node_modules/gatsby/dist/utils/babel-plugin-extract-graphql.js\\\",\\\"D:/dev/website-src/node_modules/babel-plugin-add-module-exports/lib/index.js\\\",\\\"D:/dev/website-src/node_modules/babel-plugin-add-module-exports/lib/index.js\\\",\\\"D:/dev/website-src/node_modules/babel-plugin-transform-object-assign/lib/index.js\\\"],\\\"presets\\\":[\\\"D:/dev/website-src/node_modules/babel-preset-env/lib/index.js\\\",\\\"D:/dev/website-src/node_modules/babel-preset-stage-0/lib/index.js\\\",\\\"D:/dev/website-src/node_modules/babel-preset-react/lib/index.js\\\"],\\\"cacheDirectory\\\":true}!./src/pages/freeglut-fixed-window.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.title = exports.date = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _react = __webpack_require__(\"./node_modules/react/react.js\");\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _code = __webpack_require__(\"./src/shared/code.js\");\n\t\n\tvar _code2 = _interopRequireDefault(_code);\n\t\n\tvar _comments = __webpack_require__(\"./src/shared/comments.js\");\n\t\n\tvar _comments2 = _interopRequireDefault(_comments);\n\t\n\tvar _pageTitle = __webpack_require__(\"./src/shared/page-title.js\");\n\t\n\tvar _pageTitle2 = _interopRequireDefault(_pageTitle);\n\t\n\tvar _paragraph = __webpack_require__(\"./src/shared/paragraph.js\");\n\t\n\tvar _paragraph2 = _interopRequireDefault(_paragraph);\n\t\n\tvar _inlineCode = __webpack_require__(\"./src/shared/inline-code.js\");\n\t\n\tvar _inlineCode2 = _interopRequireDefault(_inlineCode);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar date = exports.date = '31 Mar 2013';\n\tvar title = exports.title = 'FreeGlut fixed window';\n\t\n\tvar Page = function (_React$Component) {\n\t    _inherits(Page, _React$Component);\n\t\n\t    function Page() {\n\t        _classCallCheck(this, Page);\n\t\n\t        return _possibleConstructorReturn(this, (Page.__proto__ || Object.getPrototypeOf(Page)).apply(this, arguments));\n\t    }\n\t\n\t    _createClass(Page, [{\n\t        key: 'render',\n\t        value: function render() {\n\t            return _react2.default.createElement(\n\t                'div',\n\t                null,\n\t                _react2.default.createElement(_pageTitle2.default, { text: title, date: date }),\n\t                _react2.default.createElement(\n\t                    _paragraph2.default,\n\t                    null,\n\t                    'It seems like FreeGLUT has no support for fixed-size windows at the moment (i.e. having normal border, but non-resizable). For my needs I wrote a small patch (for windows version only) which fixes this issue.'\n\t                ),\n\t                _react2.default.createElement(\n\t                    _paragraph2.default,\n\t                    null,\n\t                    'In FreeGLUT sources find the ',\n\t                    _react2.default.createElement(\n\t                        _inlineCode2.default,\n\t                        null,\n\t                        'freeglut_ext.h'\n\t                    ),\n\t                    ' file and modify it as follows (new lines are marked with ++):'\n\t                ),\n\t                _react2.default.createElement(\n\t                    _code2.default,\n\t                    { lang: 'c++' },\n\t                    '/*\\n * GLUT API macro definitions -- the display mode definitions\\n */\\n#define  GLUT_CAPTIONLESS                   0x0400\\n#define  GLUT_BORDERLESS                    0x0800\\n#define  GLUT_SRGB                          0x1000\\n++ #define  GLUT_FIXED_SIZE                    0x0040'\n\t                ),\n\t                _react2.default.createElement(\n\t                    _paragraph2.default,\n\t                    null,\n\t                    'Next, modify the ',\n\t                    _react2.default.createElement(\n\t                        _inlineCode2.default,\n\t                        null,\n\t                        'freeglut_window.c'\n\t                    ),\n\t                    ' file:'\n\t                ),\n\t                _react2.default.createElement(\n\t                    _code2.default,\n\t                    { lang: 'csharp' },\n\t                    'else if( window->Parent == NULL )\\n{\\n    if ( fgState.DisplayMode & GLUT_BORDERLESS )\\n    {\\n        /* no window decorations needed */\\n    }\\n    else if ( fgState.DisplayMode & GLUT_CAPTIONLESS )\\n        /* only window decoration is a border, no title bar or buttons */\\n        flags |= WS_DLGFRAME;\\n    else\\n        /* window decoration are a border, title bar and buttons.\\n         * NB: we later query whether the window has a title bar or\\n         * not by testing for the maximize button, as the test for\\n         * WS_CAPTION can be true without the window having a title\\n         * bar. This style WS_OVERLAPPEDWINDOW gives you a maximize\\n         * button. */\\n         flags |= WS_OVERLAPPEDWINDOW;\\n++    if (fgState.DisplayMode & GLUT_FIXED_SIZE)\\n++  flags &= ~(WS_MAXIMIZEBOX | WS_THICKFRAME);\\n}'\n\t                ),\n\t                _react2.default.createElement(\n\t                    _paragraph2.default,\n\t                    null,\n\t                    'This is a dirty hack, but probably FreeGLUT developers will introduce a good solution soon.'\n\t                ),\n\t                _react2.default.createElement(_comments2.default, null)\n\t            );\n\t        }\n\t    }]);\n\t\n\t    return Page;\n\t}(_react2.default.Component);\n\t\n\texports.default = Page;\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// page-component---src-pages-freeglut-fixed-window-js-96ff9306aaf5101346a5.js","import React from 'react';\r\nimport Code from './../shared/code';\r\nimport Comments from './../shared/comments';\r\nimport PageTitle from './../shared/page-title';\r\nimport Paragraph from './../shared/paragraph';\r\nimport InlineCode from './../shared/inline-code';\r\n\r\nexport const date = '31 Mar 2013';\r\nexport const title = 'FreeGlut fixed window';\r\n\r\nexport default class Page extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <PageTitle text={title} date={date}/>\r\n\r\n                <Paragraph>\r\n                    It seems like FreeGLUT has no support for fixed-size windows at the moment\r\n                    (i.e. having normal border, but non-resizable). For my needs I wrote\r\n                    a small patch (for windows version only) which fixes this issue.\r\n                </Paragraph>\r\n\r\n                <Paragraph>\r\n                    In FreeGLUT sources find the <InlineCode>freeglut_ext.h</InlineCode> file\r\n                    and modify it as follows (new lines are marked with ++):\r\n                </Paragraph>\r\n\r\n                <Code lang=\"c++\">\r\n{`/*\r\n * GLUT API macro definitions -- the display mode definitions\r\n */\r\n#define  GLUT_CAPTIONLESS                   0x0400\r\n#define  GLUT_BORDERLESS                    0x0800\r\n#define  GLUT_SRGB                          0x1000\r\n++ #define  GLUT_FIXED_SIZE                    0x0040`}\r\n                </Code>\r\n\r\n                <Paragraph>\r\n                    Next, modify the <InlineCode>freeglut_window.c</InlineCode> file:\r\n                </Paragraph>\r\n\r\n                <Code lang=\"csharp\">\r\n{`else if( window->Parent == NULL )\r\n{\r\n    if ( fgState.DisplayMode & GLUT_BORDERLESS )\r\n    {\r\n        /* no window decorations needed */\r\n    }\r\n    else if ( fgState.DisplayMode & GLUT_CAPTIONLESS )\r\n        /* only window decoration is a border, no title bar or buttons */\r\n        flags |= WS_DLGFRAME;\r\n    else\r\n        /* window decoration are a border, title bar and buttons.\r\n         * NB: we later query whether the window has a title bar or\r\n         * not by testing for the maximize button, as the test for\r\n         * WS_CAPTION can be true without the window having a title\r\n         * bar. This style WS_OVERLAPPEDWINDOW gives you a maximize\r\n         * button. */\r\n         flags |= WS_OVERLAPPEDWINDOW;\r\n++    if (fgState.DisplayMode & GLUT_FIXED_SIZE)\r\n++  flags &= ~(WS_MAXIMIZEBOX | WS_THICKFRAME);\r\n}`}\r\n                </Code>\r\n\r\n                <Paragraph>\r\n                    This is a dirty hack, but probably FreeGLUT developers will introduce a good solution soon.\r\n                </Paragraph>\r\n\r\n                <Comments/>\r\n            </div>\r\n        );\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/freeglut-fixed-window.js"],"sourceRoot":""}